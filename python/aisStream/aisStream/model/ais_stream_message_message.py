"""
    Ais-Stream WebsocketObjects

    OpenAPI 3.0 definitions for the data models used by aisstream.io.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from aisStream.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from aisStream.exceptions import ApiAttributeError


def lazy_import():
    from aisStream.model.addressed_binary_message import AddressedBinaryMessage
    from aisStream.model.addressed_safety_message import AddressedSafetyMessage
    from aisStream.model.aids_to_navigation_report import AidsToNavigationReport
    from aisStream.model.assigned_mode_command import AssignedModeCommand
    from aisStream.model.base_station_report import BaseStationReport
    from aisStream.model.binary_acknowledge import BinaryAcknowledge
    from aisStream.model.binary_broadcast_message import BinaryBroadcastMessage
    from aisStream.model.channel_management import ChannelManagement
    from aisStream.model.coordinated_utc_inquiry import CoordinatedUTCInquiry
    from aisStream.model.data_link_management_message import DataLinkManagementMessage
    from aisStream.model.data_link_management_message_data import DataLinkManagementMessageData
    from aisStream.model.extended_class_b_position_report import ExtendedClassBPositionReport
    from aisStream.model.gnss_broadcast_binary_message import GnssBroadcastBinaryMessage
    from aisStream.model.group_assignment_command import GroupAssignmentCommand
    from aisStream.model.interrogation import Interrogation
    from aisStream.model.long_range_ais_broadcast_message import LongRangeAisBroadcastMessage
    from aisStream.model.multi_slot_binary_message import MultiSlotBinaryMessage
    from aisStream.model.position_report import PositionReport
    from aisStream.model.safety_broadcast_message import SafetyBroadcastMessage
    from aisStream.model.ship_static_data import ShipStaticData
    from aisStream.model.single_slot_binary_message import SingleSlotBinaryMessage
    from aisStream.model.standard_class_b_position_report import StandardClassBPositionReport
    from aisStream.model.standard_search_and_rescue_aircraft_report import StandardSearchAndRescueAircraftReport
    from aisStream.model.static_data_report import StaticDataReport
    from aisStream.model.unknown_message import UnknownMessage
    globals()['AddressedBinaryMessage'] = AddressedBinaryMessage
    globals()['AddressedSafetyMessage'] = AddressedSafetyMessage
    globals()['AidsToNavigationReport'] = AidsToNavigationReport
    globals()['AssignedModeCommand'] = AssignedModeCommand
    globals()['BaseStationReport'] = BaseStationReport
    globals()['BinaryAcknowledge'] = BinaryAcknowledge
    globals()['BinaryBroadcastMessage'] = BinaryBroadcastMessage
    globals()['ChannelManagement'] = ChannelManagement
    globals()['CoordinatedUTCInquiry'] = CoordinatedUTCInquiry
    globals()['DataLinkManagementMessage'] = DataLinkManagementMessage
    globals()['DataLinkManagementMessageData'] = DataLinkManagementMessageData
    globals()['ExtendedClassBPositionReport'] = ExtendedClassBPositionReport
    globals()['GnssBroadcastBinaryMessage'] = GnssBroadcastBinaryMessage
    globals()['GroupAssignmentCommand'] = GroupAssignmentCommand
    globals()['Interrogation'] = Interrogation
    globals()['LongRangeAisBroadcastMessage'] = LongRangeAisBroadcastMessage
    globals()['MultiSlotBinaryMessage'] = MultiSlotBinaryMessage
    globals()['PositionReport'] = PositionReport
    globals()['SafetyBroadcastMessage'] = SafetyBroadcastMessage
    globals()['ShipStaticData'] = ShipStaticData
    globals()['SingleSlotBinaryMessage'] = SingleSlotBinaryMessage
    globals()['StandardClassBPositionReport'] = StandardClassBPositionReport
    globals()['StandardSearchAndRescueAircraftReport'] = StandardSearchAndRescueAircraftReport
    globals()['StaticDataReport'] = StaticDataReport
    globals()['UnknownMessage'] = UnknownMessage


class AisStreamMessageMessage(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'position_report': (PositionReport,),  # noqa: E501
            'unknown_message': (UnknownMessage,),  # noqa: E501
            'addressed_safety_message': (AddressedSafetyMessage,),  # noqa: E501
            'addressed_binary_message': (AddressedBinaryMessage,),  # noqa: E501
            'aids_to_navigation_report': (AidsToNavigationReport,),  # noqa: E501
            'assigned_mode_command': (AssignedModeCommand,),  # noqa: E501
            'base_station_report': (BaseStationReport,),  # noqa: E501
            'binary_acknowledge': (BinaryAcknowledge,),  # noqa: E501
            'binary_broadcast_message': (BinaryBroadcastMessage,),  # noqa: E501
            'channel_management': (ChannelManagement,),  # noqa: E501
            'coordinated_utc_inquiry': (CoordinatedUTCInquiry,),  # noqa: E501
            'data_link_management_message': (DataLinkManagementMessage,),  # noqa: E501
            'data_link_management_message_data': (DataLinkManagementMessageData,),  # noqa: E501
            'extended_class_b_position_report': (ExtendedClassBPositionReport,),  # noqa: E501
            'gnss_broadcast_binary_message': (GnssBroadcastBinaryMessage,),  # noqa: E501
            'group_assignment_command': (GroupAssignmentCommand,),  # noqa: E501
            'interrogation': (Interrogation,),  # noqa: E501
            'long_range_ais_broadcast_message': (LongRangeAisBroadcastMessage,),  # noqa: E501
            'multi_slot_binary_message': (MultiSlotBinaryMessage,),  # noqa: E501
            'safety_broadcast_message': (SafetyBroadcastMessage,),  # noqa: E501
            'ship_static_data': (ShipStaticData,),  # noqa: E501
            'single_slot_binary_message': (SingleSlotBinaryMessage,),  # noqa: E501
            'standard_class_b_position_report': (StandardClassBPositionReport,),  # noqa: E501
            'standard_search_and_rescue_aircraft_report': (StandardSearchAndRescueAircraftReport,),  # noqa: E501
            'static_data_report': (StaticDataReport,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'position_report': 'PositionReport',  # noqa: E501
        'unknown_message': 'UnknownMessage',  # noqa: E501
        'addressed_safety_message': 'AddressedSafetyMessage',  # noqa: E501
        'addressed_binary_message': 'AddressedBinaryMessage',  # noqa: E501
        'aids_to_navigation_report': 'AidsToNavigationReport',  # noqa: E501
        'assigned_mode_command': 'AssignedModeCommand',  # noqa: E501
        'base_station_report': 'BaseStationReport',  # noqa: E501
        'binary_acknowledge': 'BinaryAcknowledge',  # noqa: E501
        'binary_broadcast_message': 'BinaryBroadcastMessage',  # noqa: E501
        'channel_management': 'ChannelManagement',  # noqa: E501
        'coordinated_utc_inquiry': 'CoordinatedUTCInquiry',  # noqa: E501
        'data_link_management_message': 'DataLinkManagementMessage',  # noqa: E501
        'data_link_management_message_data': 'DataLinkManagementMessageData',  # noqa: E501
        'extended_class_b_position_report': 'ExtendedClassBPositionReport',  # noqa: E501
        'gnss_broadcast_binary_message': 'GnssBroadcastBinaryMessage',  # noqa: E501
        'group_assignment_command': 'GroupAssignmentCommand',  # noqa: E501
        'interrogation': 'Interrogation',  # noqa: E501
        'long_range_ais_broadcast_message': 'LongRangeAisBroadcastMessage',  # noqa: E501
        'multi_slot_binary_message': 'MultiSlotBinaryMessage',  # noqa: E501
        'safety_broadcast_message': 'SafetyBroadcastMessage',  # noqa: E501
        'ship_static_data': 'ShipStaticData',  # noqa: E501
        'single_slot_binary_message': 'SingleSlotBinaryMessage',  # noqa: E501
        'standard_class_b_position_report': 'StandardClassBPositionReport',  # noqa: E501
        'standard_search_and_rescue_aircraft_report': 'StandardSearchAndRescueAircraftReport',  # noqa: E501
        'static_data_report': 'StaticDataReport',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """AisStreamMessageMessage - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            position_report (PositionReport): [optional]  # noqa: E501
            unknown_message (UnknownMessage): [optional]  # noqa: E501
            addressed_safety_message (AddressedSafetyMessage): [optional]  # noqa: E501
            addressed_binary_message (AddressedBinaryMessage): [optional]  # noqa: E501
            aids_to_navigation_report (AidsToNavigationReport): [optional]  # noqa: E501
            assigned_mode_command (AssignedModeCommand): [optional]  # noqa: E501
            base_station_report (BaseStationReport): [optional]  # noqa: E501
            binary_acknowledge (BinaryAcknowledge): [optional]  # noqa: E501
            binary_broadcast_message (BinaryBroadcastMessage): [optional]  # noqa: E501
            channel_management (ChannelManagement): [optional]  # noqa: E501
            coordinated_utc_inquiry (CoordinatedUTCInquiry): [optional]  # noqa: E501
            data_link_management_message (DataLinkManagementMessage): [optional]  # noqa: E501
            data_link_management_message_data (DataLinkManagementMessageData): [optional]  # noqa: E501
            extended_class_b_position_report (ExtendedClassBPositionReport): [optional]  # noqa: E501
            gnss_broadcast_binary_message (GnssBroadcastBinaryMessage): [optional]  # noqa: E501
            group_assignment_command (GroupAssignmentCommand): [optional]  # noqa: E501
            interrogation (Interrogation): [optional]  # noqa: E501
            long_range_ais_broadcast_message (LongRangeAisBroadcastMessage): [optional]  # noqa: E501
            multi_slot_binary_message (MultiSlotBinaryMessage): [optional]  # noqa: E501
            safety_broadcast_message (SafetyBroadcastMessage): [optional]  # noqa: E501
            ship_static_data (ShipStaticData): [optional]  # noqa: E501
            single_slot_binary_message (SingleSlotBinaryMessage): [optional]  # noqa: E501
            standard_class_b_position_report (StandardClassBPositionReport): [optional]  # noqa: E501
            standard_search_and_rescue_aircraft_report (StandardSearchAndRescueAircraftReport): [optional]  # noqa: E501
            static_data_report (StaticDataReport): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """AisStreamMessageMessage - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            position_report (PositionReport): [optional]  # noqa: E501
            unknown_message (UnknownMessage): [optional]  # noqa: E501
            addressed_safety_message (AddressedSafetyMessage): [optional]  # noqa: E501
            addressed_binary_message (AddressedBinaryMessage): [optional]  # noqa: E501
            aids_to_navigation_report (AidsToNavigationReport): [optional]  # noqa: E501
            assigned_mode_command (AssignedModeCommand): [optional]  # noqa: E501
            base_station_report (BaseStationReport): [optional]  # noqa: E501
            binary_acknowledge (BinaryAcknowledge): [optional]  # noqa: E501
            binary_broadcast_message (BinaryBroadcastMessage): [optional]  # noqa: E501
            channel_management (ChannelManagement): [optional]  # noqa: E501
            coordinated_utc_inquiry (CoordinatedUTCInquiry): [optional]  # noqa: E501
            data_link_management_message (DataLinkManagementMessage): [optional]  # noqa: E501
            data_link_management_message_data (DataLinkManagementMessageData): [optional]  # noqa: E501
            extended_class_b_position_report (ExtendedClassBPositionReport): [optional]  # noqa: E501
            gnss_broadcast_binary_message (GnssBroadcastBinaryMessage): [optional]  # noqa: E501
            group_assignment_command (GroupAssignmentCommand): [optional]  # noqa: E501
            interrogation (Interrogation): [optional]  # noqa: E501
            long_range_ais_broadcast_message (LongRangeAisBroadcastMessage): [optional]  # noqa: E501
            multi_slot_binary_message (MultiSlotBinaryMessage): [optional]  # noqa: E501
            safety_broadcast_message (SafetyBroadcastMessage): [optional]  # noqa: E501
            ship_static_data (ShipStaticData): [optional]  # noqa: E501
            single_slot_binary_message (SingleSlotBinaryMessage): [optional]  # noqa: E501
            standard_class_b_position_report (StandardClassBPositionReport): [optional]  # noqa: E501
            standard_search_and_rescue_aircraft_report (StandardSearchAndRescueAircraftReport): [optional]  # noqa: E501
            static_data_report (StaticDataReport): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
