/*
 * Ais-Stream WebsocketObjects
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ShipStaticDataDimension;
import org.openapitools.client.model.ShipStaticDataEta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShipStaticData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-03T16:23:44.640253-07:00[America/Vancouver]")
public class ShipStaticData {
  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private Integer messageID;

  public static final String SERIALIZED_NAME_REPEAT_INDICATOR = "RepeatIndicator";
  @SerializedName(SERIALIZED_NAME_REPEAT_INDICATOR)
  private Integer repeatIndicator;

  public static final String SERIALIZED_NAME_USER_I_D = "UserID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private Integer userID;

  public static final String SERIALIZED_NAME_VALID = "Valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_AIS_VERSION = "AisVersion";
  @SerializedName(SERIALIZED_NAME_AIS_VERSION)
  private Integer aisVersion;

  public static final String SERIALIZED_NAME_IMO_NUMBER = "ImoNumber";
  @SerializedName(SERIALIZED_NAME_IMO_NUMBER)
  private Integer imoNumber;

  public static final String SERIALIZED_NAME_CALL_SIGN = "CallSign";
  @SerializedName(SERIALIZED_NAME_CALL_SIGN)
  private String callSign;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_DIMENSION = "Dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private ShipStaticDataDimension dimension;

  public static final String SERIALIZED_NAME_FIX_TYPE = "FixType";
  @SerializedName(SERIALIZED_NAME_FIX_TYPE)
  private Integer fixType;

  public static final String SERIALIZED_NAME_ETA = "Eta";
  @SerializedName(SERIALIZED_NAME_ETA)
  private ShipStaticDataEta eta;

  public static final String SERIALIZED_NAME_MAXIMUM_STATIC_DRAUGHT = "MaximumStaticDraught";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_STATIC_DRAUGHT)
  private Double maximumStaticDraught;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_DTE = "Dte";
  @SerializedName(SERIALIZED_NAME_DTE)
  private Boolean dte;

  public static final String SERIALIZED_NAME_SPARE = "Spare";
  @SerializedName(SERIALIZED_NAME_SPARE)
  private Boolean spare;

  public ShipStaticData() { 
  }

  public ShipStaticData messageID(Integer messageID) {
    
    this.messageID = messageID;
    return this;
  }

   /**
   * Get messageID
   * @return messageID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMessageID() {
    return messageID;
  }


  public void setMessageID(Integer messageID) {
    this.messageID = messageID;
  }


  public ShipStaticData repeatIndicator(Integer repeatIndicator) {
    
    this.repeatIndicator = repeatIndicator;
    return this;
  }

   /**
   * Get repeatIndicator
   * @return repeatIndicator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRepeatIndicator() {
    return repeatIndicator;
  }


  public void setRepeatIndicator(Integer repeatIndicator) {
    this.repeatIndicator = repeatIndicator;
  }


  public ShipStaticData userID(Integer userID) {
    
    this.userID = userID;
    return this;
  }

   /**
   * Get userID
   * @return userID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUserID() {
    return userID;
  }


  public void setUserID(Integer userID) {
    this.userID = userID;
  }


  public ShipStaticData valid(Boolean valid) {
    
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getValid() {
    return valid;
  }


  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public ShipStaticData aisVersion(Integer aisVersion) {
    
    this.aisVersion = aisVersion;
    return this;
  }

   /**
   * Get aisVersion
   * @return aisVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAisVersion() {
    return aisVersion;
  }


  public void setAisVersion(Integer aisVersion) {
    this.aisVersion = aisVersion;
  }


  public ShipStaticData imoNumber(Integer imoNumber) {
    
    this.imoNumber = imoNumber;
    return this;
  }

   /**
   * Get imoNumber
   * @return imoNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getImoNumber() {
    return imoNumber;
  }


  public void setImoNumber(Integer imoNumber) {
    this.imoNumber = imoNumber;
  }


  public ShipStaticData callSign(String callSign) {
    
    this.callSign = callSign;
    return this;
  }

   /**
   * Get callSign
   * @return callSign
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCallSign() {
    return callSign;
  }


  public void setCallSign(String callSign) {
    this.callSign = callSign;
  }


  public ShipStaticData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ShipStaticData type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  public ShipStaticData dimension(ShipStaticDataDimension dimension) {
    
    this.dimension = dimension;
    return this;
  }

   /**
   * Get dimension
   * @return dimension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ShipStaticDataDimension getDimension() {
    return dimension;
  }


  public void setDimension(ShipStaticDataDimension dimension) {
    this.dimension = dimension;
  }


  public ShipStaticData fixType(Integer fixType) {
    
    this.fixType = fixType;
    return this;
  }

   /**
   * Get fixType
   * @return fixType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFixType() {
    return fixType;
  }


  public void setFixType(Integer fixType) {
    this.fixType = fixType;
  }


  public ShipStaticData eta(ShipStaticDataEta eta) {
    
    this.eta = eta;
    return this;
  }

   /**
   * Get eta
   * @return eta
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ShipStaticDataEta getEta() {
    return eta;
  }


  public void setEta(ShipStaticDataEta eta) {
    this.eta = eta;
  }


  public ShipStaticData maximumStaticDraught(Double maximumStaticDraught) {
    
    this.maximumStaticDraught = maximumStaticDraught;
    return this;
  }

   /**
   * Get maximumStaticDraught
   * @return maximumStaticDraught
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getMaximumStaticDraught() {
    return maximumStaticDraught;
  }


  public void setMaximumStaticDraught(Double maximumStaticDraught) {
    this.maximumStaticDraught = maximumStaticDraught;
  }


  public ShipStaticData destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public ShipStaticData dte(Boolean dte) {
    
    this.dte = dte;
    return this;
  }

   /**
   * Get dte
   * @return dte
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getDte() {
    return dte;
  }


  public void setDte(Boolean dte) {
    this.dte = dte;
  }


  public ShipStaticData spare(Boolean spare) {
    
    this.spare = spare;
    return this;
  }

   /**
   * Get spare
   * @return spare
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSpare() {
    return spare;
  }


  public void setSpare(Boolean spare) {
    this.spare = spare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipStaticData shipStaticData = (ShipStaticData) o;
    return Objects.equals(this.messageID, shipStaticData.messageID) &&
        Objects.equals(this.repeatIndicator, shipStaticData.repeatIndicator) &&
        Objects.equals(this.userID, shipStaticData.userID) &&
        Objects.equals(this.valid, shipStaticData.valid) &&
        Objects.equals(this.aisVersion, shipStaticData.aisVersion) &&
        Objects.equals(this.imoNumber, shipStaticData.imoNumber) &&
        Objects.equals(this.callSign, shipStaticData.callSign) &&
        Objects.equals(this.name, shipStaticData.name) &&
        Objects.equals(this.type, shipStaticData.type) &&
        Objects.equals(this.dimension, shipStaticData.dimension) &&
        Objects.equals(this.fixType, shipStaticData.fixType) &&
        Objects.equals(this.eta, shipStaticData.eta) &&
        Objects.equals(this.maximumStaticDraught, shipStaticData.maximumStaticDraught) &&
        Objects.equals(this.destination, shipStaticData.destination) &&
        Objects.equals(this.dte, shipStaticData.dte) &&
        Objects.equals(this.spare, shipStaticData.spare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageID, repeatIndicator, userID, valid, aisVersion, imoNumber, callSign, name, type, dimension, fixType, eta, maximumStaticDraught, destination, dte, spare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipStaticData {\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    repeatIndicator: ").append(toIndentedString(repeatIndicator)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    aisVersion: ").append(toIndentedString(aisVersion)).append("\n");
    sb.append("    imoNumber: ").append(toIndentedString(imoNumber)).append("\n");
    sb.append("    callSign: ").append(toIndentedString(callSign)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    fixType: ").append(toIndentedString(fixType)).append("\n");
    sb.append("    eta: ").append(toIndentedString(eta)).append("\n");
    sb.append("    maximumStaticDraught: ").append(toIndentedString(maximumStaticDraught)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    dte: ").append(toIndentedString(dte)).append("\n");
    sb.append("    spare: ").append(toIndentedString(spare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MessageID");
    openapiFields.add("RepeatIndicator");
    openapiFields.add("UserID");
    openapiFields.add("Valid");
    openapiFields.add("AisVersion");
    openapiFields.add("ImoNumber");
    openapiFields.add("CallSign");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("Dimension");
    openapiFields.add("FixType");
    openapiFields.add("Eta");
    openapiFields.add("MaximumStaticDraught");
    openapiFields.add("Destination");
    openapiFields.add("Dte");
    openapiFields.add("Spare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageID");
    openapiRequiredFields.add("RepeatIndicator");
    openapiRequiredFields.add("UserID");
    openapiRequiredFields.add("Valid");
    openapiRequiredFields.add("AisVersion");
    openapiRequiredFields.add("ImoNumber");
    openapiRequiredFields.add("CallSign");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Dimension");
    openapiRequiredFields.add("FixType");
    openapiRequiredFields.add("Eta");
    openapiRequiredFields.add("MaximumStaticDraught");
    openapiRequiredFields.add("Destination");
    openapiRequiredFields.add("Dte");
    openapiRequiredFields.add("Spare");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipStaticData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ShipStaticData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipStaticData is not found in the empty JSON string", ShipStaticData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShipStaticData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipStaticData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShipStaticData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("CallSign") != null && !jsonObj.get("CallSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallSign").toString()));
      }
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Dimension`
      if (jsonObj.getAsJsonObject("Dimension") != null) {
        ShipStaticDataDimension.validateJsonObject(jsonObj.getAsJsonObject("Dimension"));
      }
      // validate the optional field `Eta`
      if (jsonObj.getAsJsonObject("Eta") != null) {
        ShipStaticDataEta.validateJsonObject(jsonObj.getAsJsonObject("Eta"));
      }
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Destination").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipStaticData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipStaticData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipStaticData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipStaticData.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipStaticData>() {
           @Override
           public void write(JsonWriter out, ShipStaticData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipStaticData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipStaticData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipStaticData
  * @throws IOException if the JSON string is invalid with respect to ShipStaticData
  */
  public static ShipStaticData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipStaticData.class);
  }

 /**
  * Convert an instance of ShipStaticData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

