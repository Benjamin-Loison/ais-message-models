/*
 * Ais-Stream WebsocketObjects
 * OpenAPI 3.0 definitions for the data models used by aisstream.io.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.AddressedBinaryMessage;
import org.openapitools.client.model.AddressedBinaryMessageApplicationID;
import org.openapitools.client.model.AddressedSafetyMessage;
import org.openapitools.client.model.AidsToNavigationReport;
import org.openapitools.client.model.AssignedModeCommand;
import org.openapitools.client.model.AssignedModeCommandCommands;
import org.openapitools.client.model.BaseStationReport;
import org.openapitools.client.model.BinaryAcknowledge;
import org.openapitools.client.model.BinaryAcknowledgeDestinations;
import org.openapitools.client.model.BinaryBroadcastMessage;
import org.openapitools.client.model.ChannelManagement;
import org.openapitools.client.model.ChannelManagementArea;
import org.openapitools.client.model.ChannelManagementUnicast;
import org.openapitools.client.model.CoordinatedUTCInquiry;
import org.openapitools.client.model.DataLinkManagementMessage;
import org.openapitools.client.model.DataLinkManagementMessageData;
import org.openapitools.client.model.ExtendedClassBPositionReport;
import org.openapitools.client.model.GnssBroadcastBinaryMessage;
import org.openapitools.client.model.GroupAssignmentCommand;
import org.openapitools.client.model.Interrogation;
import org.openapitools.client.model.InterrogationStation1Msg1;
import org.openapitools.client.model.InterrogationStation1Msg2;
import org.openapitools.client.model.InterrogationStation2;
import org.openapitools.client.model.LongRangeAisBroadcastMessage;
import org.openapitools.client.model.MultiSlotBinaryMessage;
import org.openapitools.client.model.PositionReport;
import org.openapitools.client.model.SafetyBroadcastMessage;
import org.openapitools.client.model.ShipStaticData;
import org.openapitools.client.model.ShipStaticDataDimension;
import org.openapitools.client.model.ShipStaticDataEta;
import org.openapitools.client.model.SingleSlotBinaryMessage;
import org.openapitools.client.model.StandardClassBPositionReport;
import org.openapitools.client.model.StandardSearchAndRescueAircraftReport;
import org.openapitools.client.model.StaticDataReport;
import org.openapitools.client.model.StaticDataReportReportA;
import org.openapitools.client.model.StaticDataReportReportB;
import org.openapitools.client.model.UnknownMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for AisStreamMessageMessage
 */
public class AisStreamMessageMessageTest {
    private final AisStreamMessageMessage model = new AisStreamMessageMessage();

    /**
     * Model tests for AisStreamMessageMessage
     */
    @Test
    public void testAisStreamMessageMessage() {
        // TODO: test AisStreamMessageMessage
    }

    /**
     * Test the property 'messageID'
     */
    @Test
    public void messageIDTest() {
        // TODO: test messageID
    }

    /**
     * Test the property 'repeatIndicator'
     */
    @Test
    public void repeatIndicatorTest() {
        // TODO: test repeatIndicator
    }

    /**
     * Test the property 'userID'
     */
    @Test
    public void userIDTest() {
        // TODO: test userID
    }

    /**
     * Test the property 'valid'
     */
    @Test
    public void validTest() {
        // TODO: test valid
    }

    /**
     * Test the property 'navigationalStatus'
     */
    @Test
    public void navigationalStatusTest() {
        // TODO: test navigationalStatus
    }

    /**
     * Test the property 'rateOfTurn'
     */
    @Test
    public void rateOfTurnTest() {
        // TODO: test rateOfTurn
    }

    /**
     * Test the property 'sog'
     */
    @Test
    public void sogTest() {
        // TODO: test sog
    }

    /**
     * Test the property 'positionAccuracy'
     */
    @Test
    public void positionAccuracyTest() {
        // TODO: test positionAccuracy
    }

    /**
     * Test the property 'longitude'
     */
    @Test
    public void longitudeTest() {
        // TODO: test longitude
    }

    /**
     * Test the property 'latitude'
     */
    @Test
    public void latitudeTest() {
        // TODO: test latitude
    }

    /**
     * Test the property 'cog'
     */
    @Test
    public void cogTest() {
        // TODO: test cog
    }

    /**
     * Test the property 'trueHeading'
     */
    @Test
    public void trueHeadingTest() {
        // TODO: test trueHeading
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'specialManoeuvreIndicator'
     */
    @Test
    public void specialManoeuvreIndicatorTest() {
        // TODO: test specialManoeuvreIndicator
    }

    /**
     * Test the property 'spare'
     */
    @Test
    public void spareTest() {
        // TODO: test spare
    }

    /**
     * Test the property 'raim'
     */
    @Test
    public void raimTest() {
        // TODO: test raim
    }

    /**
     * Test the property 'communicationState'
     */
    @Test
    public void communicationStateTest() {
        // TODO: test communicationState
    }

    /**
     * Test the property 'error'
     */
    @Test
    public void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'sequenceinteger'
     */
    @Test
    public void sequenceintegerTest() {
        // TODO: test sequenceinteger
    }

    /**
     * Test the property 'destinationID'
     */
    @Test
    public void destinationIDTest() {
        // TODO: test destinationID
    }

    /**
     * Test the property 'retransmission'
     */
    @Test
    public void retransmissionTest() {
        // TODO: test retransmission
    }

    /**
     * Test the property 'text'
     */
    @Test
    public void textTest() {
        // TODO: test text
    }

    /**
     * Test the property 'applicationID'
     */
    @Test
    public void applicationIDTest() {
        // TODO: test applicationID
    }

    /**
     * Test the property 'binaryData'
     */
    @Test
    public void binaryDataTest() {
        // TODO: test binaryData
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'dimension'
     */
    @Test
    public void dimensionTest() {
        // TODO: test dimension
    }

    /**
     * Test the property 'fixtype'
     */
    @Test
    public void fixtypeTest() {
        // TODO: test fixtype
    }

    /**
     * Test the property 'offPosition'
     */
    @Test
    public void offPositionTest() {
        // TODO: test offPosition
    }

    /**
     * Test the property 'atoN'
     */
    @Test
    public void atoNTest() {
        // TODO: test atoN
    }

    /**
     * Test the property 'virtualAtoN'
     */
    @Test
    public void virtualAtoNTest() {
        // TODO: test virtualAtoN
    }

    /**
     * Test the property 'assignedMode'
     */
    @Test
    public void assignedModeTest() {
        // TODO: test assignedMode
    }

    /**
     * Test the property 'nameExtension'
     */
    @Test
    public void nameExtensionTest() {
        // TODO: test nameExtension
    }

    /**
     * Test the property 'commands'
     */
    @Test
    public void commandsTest() {
        // TODO: test commands
    }

    /**
     * Test the property 'utcYear'
     */
    @Test
    public void utcYearTest() {
        // TODO: test utcYear
    }

    /**
     * Test the property 'utcMonth'
     */
    @Test
    public void utcMonthTest() {
        // TODO: test utcMonth
    }

    /**
     * Test the property 'utcDay'
     */
    @Test
    public void utcDayTest() {
        // TODO: test utcDay
    }

    /**
     * Test the property 'utcHour'
     */
    @Test
    public void utcHourTest() {
        // TODO: test utcHour
    }

    /**
     * Test the property 'utcMinute'
     */
    @Test
    public void utcMinuteTest() {
        // TODO: test utcMinute
    }

    /**
     * Test the property 'utcSecond'
     */
    @Test
    public void utcSecondTest() {
        // TODO: test utcSecond
    }

    /**
     * Test the property 'fixType'
     */
    @Test
    public void fixTypeTest() {
        // TODO: test fixType
    }

    /**
     * Test the property 'longRangeEnable'
     */
    @Test
    public void longRangeEnableTest() {
        // TODO: test longRangeEnable
    }

    /**
     * Test the property 'destinations'
     */
    @Test
    public void destinationsTest() {
        // TODO: test destinations
    }

    /**
     * Test the property 'spare1'
     */
    @Test
    public void spare1Test() {
        // TODO: test spare1
    }

    /**
     * Test the property 'channelA'
     */
    @Test
    public void channelATest() {
        // TODO: test channelA
    }

    /**
     * Test the property 'channelB'
     */
    @Test
    public void channelBTest() {
        // TODO: test channelB
    }

    /**
     * Test the property 'txRxMode'
     */
    @Test
    public void txRxModeTest() {
        // TODO: test txRxMode
    }

    /**
     * Test the property 'lowPower'
     */
    @Test
    public void lowPowerTest() {
        // TODO: test lowPower
    }

    /**
     * Test the property 'area'
     */
    @Test
    public void areaTest() {
        // TODO: test area
    }

    /**
     * Test the property 'unicast'
     */
    @Test
    public void unicastTest() {
        // TODO: test unicast
    }

    /**
     * Test the property 'isAddressed'
     */
    @Test
    public void isAddressedTest() {
        // TODO: test isAddressed
    }

    /**
     * Test the property 'bwA'
     */
    @Test
    public void bwATest() {
        // TODO: test bwA
    }

    /**
     * Test the property 'bwB'
     */
    @Test
    public void bwBTest() {
        // TODO: test bwB
    }

    /**
     * Test the property 'transitionalZoneSize'
     */
    @Test
    public void transitionalZoneSizeTest() {
        // TODO: test transitionalZoneSize
    }

    /**
     * Test the property 'spare4'
     */
    @Test
    public void spare4Test() {
        // TODO: test spare4
    }

    /**
     * Test the property 'spare2'
     */
    @Test
    public void spare2Test() {
        // TODO: test spare2
    }

    /**
     * Test the property 'data'
     */
    @Test
    public void dataTest() {
        // TODO: test data
    }

    /**
     * Test the property 'dte'
     */
    @Test
    public void dteTest() {
        // TODO: test dte
    }

    /**
     * Test the property 'spare3'
     */
    @Test
    public void spare3Test() {
        // TODO: test spare3
    }

    /**
     * Test the property 'longitude1'
     */
    @Test
    public void longitude1Test() {
        // TODO: test longitude1
    }

    /**
     * Test the property 'latitude1'
     */
    @Test
    public void latitude1Test() {
        // TODO: test latitude1
    }

    /**
     * Test the property 'longitude2'
     */
    @Test
    public void longitude2Test() {
        // TODO: test longitude2
    }

    /**
     * Test the property 'latitude2'
     */
    @Test
    public void latitude2Test() {
        // TODO: test latitude2
    }

    /**
     * Test the property 'stationType'
     */
    @Test
    public void stationTypeTest() {
        // TODO: test stationType
    }

    /**
     * Test the property 'shipType'
     */
    @Test
    public void shipTypeTest() {
        // TODO: test shipType
    }

    /**
     * Test the property 'reportingInterval'
     */
    @Test
    public void reportingIntervalTest() {
        // TODO: test reportingInterval
    }

    /**
     * Test the property 'quietTime'
     */
    @Test
    public void quietTimeTest() {
        // TODO: test quietTime
    }

    /**
     * Test the property 'station1Msg1'
     */
    @Test
    public void station1Msg1Test() {
        // TODO: test station1Msg1
    }

    /**
     * Test the property 'station1Msg2'
     */
    @Test
    public void station1Msg2Test() {
        // TODO: test station1Msg2
    }

    /**
     * Test the property 'station2'
     */
    @Test
    public void station2Test() {
        // TODO: test station2
    }

    /**
     * Test the property 'positionLatency'
     */
    @Test
    public void positionLatencyTest() {
        // TODO: test positionLatency
    }

    /**
     * Test the property 'destinationIDValid'
     */
    @Test
    public void destinationIDValidTest() {
        // TODO: test destinationIDValid
    }

    /**
     * Test the property 'applicationIDValid'
     */
    @Test
    public void applicationIDValidTest() {
        // TODO: test applicationIDValid
    }

    /**
     * Test the property 'payload'
     */
    @Test
    public void payloadTest() {
        // TODO: test payload
    }

    /**
     * Test the property 'communicationStateIsItdma'
     */
    @Test
    public void communicationStateIsItdmaTest() {
        // TODO: test communicationStateIsItdma
    }

    /**
     * Test the property 'aisVersion'
     */
    @Test
    public void aisVersionTest() {
        // TODO: test aisVersion
    }

    /**
     * Test the property 'imoNumber'
     */
    @Test
    public void imoNumberTest() {
        // TODO: test imoNumber
    }

    /**
     * Test the property 'callSign'
     */
    @Test
    public void callSignTest() {
        // TODO: test callSign
    }

    /**
     * Test the property 'eta'
     */
    @Test
    public void etaTest() {
        // TODO: test eta
    }

    /**
     * Test the property 'maximumStaticDraught'
     */
    @Test
    public void maximumStaticDraughtTest() {
        // TODO: test maximumStaticDraught
    }

    /**
     * Test the property 'destination'
     */
    @Test
    public void destinationTest() {
        // TODO: test destination
    }

    /**
     * Test the property 'classBUnit'
     */
    @Test
    public void classBUnitTest() {
        // TODO: test classBUnit
    }

    /**
     * Test the property 'classBDisplay'
     */
    @Test
    public void classBDisplayTest() {
        // TODO: test classBDisplay
    }

    /**
     * Test the property 'classBDsc'
     */
    @Test
    public void classBDscTest() {
        // TODO: test classBDsc
    }

    /**
     * Test the property 'classBBand'
     */
    @Test
    public void classBBandTest() {
        // TODO: test classBBand
    }

    /**
     * Test the property 'classBMsg22'
     */
    @Test
    public void classBMsg22Test() {
        // TODO: test classBMsg22
    }

    /**
     * Test the property 'altitude'
     */
    @Test
    public void altitudeTest() {
        // TODO: test altitude
    }

    /**
     * Test the property 'altFromBaro'
     */
    @Test
    public void altFromBaroTest() {
        // TODO: test altFromBaro
    }

    /**
     * Test the property 'reserved'
     */
    @Test
    public void reservedTest() {
        // TODO: test reserved
    }

    /**
     * Test the property 'partNumber'
     */
    @Test
    public void partNumberTest() {
        // TODO: test partNumber
    }

    /**
     * Test the property 'reportA'
     */
    @Test
    public void reportATest() {
        // TODO: test reportA
    }

    /**
     * Test the property 'reportB'
     */
    @Test
    public void reportBTest() {
        // TODO: test reportB
    }

}
